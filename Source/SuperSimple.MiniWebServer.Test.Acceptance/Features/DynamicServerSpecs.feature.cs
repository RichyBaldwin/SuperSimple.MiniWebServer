// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SuperSimple.MiniWebServer.Test.Acceptance.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DynamicServerSpecsFeature : Xunit.IUseFixture<DynamicServerSpecsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DynamicServerSpecs.feature"
#line hidden
        
        public DynamicServerSpecsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DynamicServerSpecs", "In order to be able to mock web requests\r\nAs a developer writting service tests t" +
                    "hat mock out a web server\r\nI want to be able to set the reply to a web request", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(DynamicServerSpecsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicServerSpecs")]
        [Xunit.TraitAttribute("Description", "Set dynamic resource reply")]
        public virtual void SetDynamicResourceReply()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set dynamic resource reply", new string[] {
                        "Acceptance.Dynamic"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I post to resource /MyResource/ResourceId with header Set-Reply:true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I attempt a get on resource /MyResource/ResourceId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("I should get back exactly what I set up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicServerSpecs")]
        [Xunit.TraitAttribute("Description", "Clear a specific dynamic resource reply")]
        public virtual void ClearASpecificDynamicResourceReply()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clear a specific dynamic resource reply", new string[] {
                        "Acceptance.Dynamic"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I post to resource /MyResource/ResourceId with header Set-Reply:true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("I post to resource /MyResource/ResourceId with header Clear-Reply:this", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("a get on /MyResource/ResourceId should return status 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicServerSpecs")]
        [Xunit.TraitAttribute("Description", "Clear a specific dynamic resource reply should only clear the specific path")]
        public virtual void ClearASpecificDynamicResourceReplyShouldOnlyClearTheSpecificPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clear a specific dynamic resource reply should only clear the specific path", new string[] {
                        "Acceptance.Dynamic"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I post to resource /MyResource/ResourceId with header Set-Reply:true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.And("I post to resource /MyResource/ResourceId2 with header Set-Reply:true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.When("I post to resource /MyResource/ResourceId with header Clear-Reply:this", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("a get on /MyResource/ResourceId2 should get back exactly what I set up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicServerSpecs")]
        [Xunit.TraitAttribute("Description", "Clear all dynamic resource replies")]
        public virtual void ClearAllDynamicResourceReplies()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clear all dynamic resource replies", new string[] {
                        "Acceptance.Dynamic"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I post to resource /MyResource/ResourceId with header Set-Reply:true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.And("I post to resource /MyResource/ResourceId2 with header Set-Reply:true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.When("I post to resource /MyResource/ResourceId with header Clear-Reply:all", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("a get on /MyResource/ResourceId should return status 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
 testRunner.And("a get on /MyResource/ResourceId2 should return status 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.Extensions.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicServerSpecs")]
        [Xunit.TraitAttribute("Description", "Set method for dynamic resource")]
        [Xunit.Extensions.InlineDataAttribute("GET", "POST", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("POST", "GET", new string[0])]
        public virtual void SetMethodForDynamicResource(string verbToWork, string verbThatShouldNotWork, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Acceptance.Dynamic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set method for dynamic resource", @__tags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given(string.Format("I set resource /MyResource/ResourceId with header Set-Reply-Method:{0}", verbToWork), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.When(string.Format("I attempt a {0} on resource /MyResource/ResourceId", verbToWork), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("I should get back exactly what I set up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.Extensions.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicServerSpecs")]
        [Xunit.TraitAttribute("Description", "Set content type for dynamic resource")]
        [Xunit.Extensions.InlineDataAttribute("MyCustomContentType", new string[0])]
        public virtual void SetContentTypeForDynamicResource(string contentType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Acceptance.Dynamic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set content type for dynamic resource", @__tags);
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.Given(string.Format("I set resource /MyResource/ResourceId with header Set-Content-Type:{0}", contentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
 testRunner.When("I attempt a GET on resource /MyResource/ResourceId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then(string.Format("the the reply should have a content type of {0}", contentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DynamicServerSpecsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DynamicServerSpecsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
